;; (setq org-capture-templates
;;       `(("i" "Inbox" entry  (file "gtd/inbox.org")
;;          ,(concat "* TODO %?\n"
;;                   "/Entered on/ %U"))
;;         ("s" "Slipbox" entry  (file "braindump/org/inbox.org")
;;          "* %?\n")
;;         ("l" "Linear Task" entry
;;          (file "main/linear.org" "Linear Tasks")
;;          "* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n%i\n"
;;          :immediate-finish t
;;          :after-finalize (lambda ()
;;                            (create-linear-issue
;;                             (org-get-heading t t t t)
;;                             (org-get-entry))))))
;; (defun create-linear-issue (title description)
;;   (let ((url "https://api.linear.app/graphql")
;;         (headers `(("Content-Type" . "application/json")
;;                    ("Authorization" . ,(concat "Bearer " LINEAR_API_KEY))))
;;         (query "mutation CreateIssue($title: String!, $description: String!) {
;;                   issueCreate(input: {title: $title, description: $description}) {
;;                     success
;;                     issue {
;;                       id
;;                       url
;;                     }
;;                   }
;;                 }"))
;;     (request
;;       url
;;       :type "POST"
;;       :headers headers
;;       :data (json-encode `(("query" . ,query)
;;                            ("variables" . (("title" . ,title)
;;                                            ("description" . ,description)))))
;;       :parser 'json-read
;;       :success (cl-function
;;                 (lambda (&key data &allow-other-keys)
;;                   (message "Issue created successfully"))))))
;; (require 'linear)
