  ;; Define workspace window cycling functions
  ;; (defun my/cycle-workspace-windows (&optional reverse)
  ;;   "Cycle through windows in the current workspace.
  ;; When REVERSE is non-nil, cycle in reverse order."
  ;;   (interactive "P")
  ;;   (let* ((windows (window-list))
  ;;          (num-windows (length windows))
  ;;          (current (selected-window))
  ;;          (pos (cl-position current windows))
  ;;          (next-pos (if reverse
  ;;                        (if (= pos 0)
  ;;                            (1- num-windows)
  ;;                          (1- pos))
  ;;                      (if (= pos (1- num-windows))
  ;;                          0
  ;;                        (1+ pos))))
  ;;          (next-window (nth next-pos windows)))
  ;;     (when next-window
  ;;       (select-window next-window))))

  ;; (defun my/cycle-workspace-windows-reverse ()
  ;;   "Cycle through windows in the current workspace in reverse order."
  ;;   (interactive)
  ;;   (my/cycle-workspace-windows t))

  ;; ;; Key bindings - choose what works best for you
  ;; (map! :leader
  ;;       :desc "Cycle windows forward"
  ;;       "w c" #'my/cycle-workspace-windows)

  ;; (map! :leader
  ;;       :desc "Cycle windows backward"
  ;;       "w C" #'my/cycle-workspace-windows-reverse)

;; Rust development configuration
(require 'dap-lldb)
(require 'dap-cpptools)
(after! dap-mode
  (dap-ui-mode)
  (dap-ui-controls-mode 1)
  (require 'dap-lldb)
  (require 'dap-cpptools)
  (require 'dap-gdb-lldb)
  (dap-gdb-lldb-setup)
  (dap-cpptools-setup)
  (dap-register-debug-template "Rust::CppTools Run Configuration"
                               (list :type "cppdbg"
                                     :request "launch"
                                     :name "Rust::debug"
                                     :MIMode "gdb"
                                     :miDebuggerPath "rust-gdb"
                                     :environment []
                                     :program "${workspaceFolder}/target/debug/${workspaceRootFolderName}"
                                     :cwd "${workspaceFolder}"
                                     :console "external"
                                     :dap-compilation "cargo build"
                                     :dap-compilation-dir "${workspaceFolder}")))

(after! 'dap-mode
  (setq dap-default-terminal-kind "integrated") ;; Terminal programs open in Emacs buffer
  (dap-auto-configure-mode +1))

;; Function to invalidate projectile cache after git checkout
(defun my/projectile-invalidate-cache-on-git-checkout ()
  "Invalidate projectile cache when changing git branches."
  (let ((project-root (projectile-project-root)))
    (when project-root
      (message "Git branch changed - invalidating projectile cache for %s" project-root)
      (projectile-invalidate-cache nil))))
