  ;; Define workspace window cycling functions
  ;; (defun my/cycle-workspace-windows (&optional reverse)
  ;;   "Cycle through windows in the current workspace.
  ;; When REVERSE is non-nil, cycle in reverse order."
  ;;   (interactive "P")
  ;;   (let* ((windows (window-list))
  ;;          (num-windows (length windows))
  ;;          (current (selected-window))
  ;;          (pos (cl-position current windows))
  ;;          (next-pos (if reverse
  ;;                        (if (= pos 0)
  ;;                            (1- num-windows)
  ;;                          (1- pos))
  ;;                      (if (= pos (1- num-windows))
  ;;                          0
  ;;                        (1+ pos))))
  ;;          (next-window (nth next-pos windows)))
  ;;     (when next-window
  ;;       (select-window next-window))))

  ;; (defun my/cycle-workspace-windows-reverse ()
  ;;   "Cycle through windows in the current workspace in reverse order."
  ;;   (interactive)
  ;;   (my/cycle-workspace-windows t))

  ;; ;; Key bindings - choose what works best for you
  ;; (map! :leader
  ;;       :desc "Cycle windows forward"
  ;;       "w c" #'my/cycle-workspace-windows)

  ;; (map! :leader
  ;;       :desc "Cycle windows backward"
  ;;       "w C" #'my/cycle-workspace-windows-reverse)

;; Rust development configuration
(require 'dap-lldb)
(require 'dap-cpptools)
(after! dap-mode
  (dap-ui-mode)
  (dap-ui-controls-mode 1)
  (require 'dap-lldb)
  (require 'dap-cpptools)
  (require 'dap-gdb-lldb)
  (dap-gdb-lldb-setup)
  (dap-cpptools-setup)
  (dap-register-debug-template "Rust::CppTools Run Configuration"
                               (list :type "cppdbg"
                                     :request "launch"
                                     :name "Rust::debug"
                                     :MIMode "gdb"
                                     :miDebuggerPath "rust-gdb"
                                     :environment []
                                     :program "${workspaceFolder}/target/debug/${workspaceRootFolderName}"
                                     :cwd "${workspaceFolder}"
                                     :console "external"
                                     :dap-compilation "cargo build"
                                     :dap-compilation-dir "${workspaceFolder}")))

(after! 'dap-mode
  (setq dap-default-terminal-kind "integrated") ;; Terminal programs open in Emacs buffer
  (dap-auto-configure-mode +1))

;; Function to invalidate projectile cache after git checkout
(defun my/projectile-invalidate-cache-on-git-checkout ()
  "Invalidate projectile cache when changing git branches."
  (let ((project-root (projectile-project-root)))
    (when project-root
      (message "Git branch changed - invalidating projectile cache for %s" project-root)
      (projectile-invalidate-cache nil))))

;;; =========================================================================
;;; EAF
;;; =========================================================================
;; (use-package! eaf
;;   :load-path "~/.config/emacs/site-lisp/emacs-application-framework"
;;   :init
;;   :custom
;;   ;; (eaf-browser-continue-where-left-off t)
;;   (eaf-browser-enable-adblocker t)
;;   ;; (browse-url-browser-function 'eaf-open-browser) ;; Make EAF Browser my default browser
;;   :config
;;   ;; (defalias 'browse-web #'eaf-open-browser)

;;   (require 'eaf-file-manager)
;;   (require 'eaf-music-player)
;;   (require 'eaf-image-viewer)
;;   (require 'eaf-camera)
;;   ;; (require 'eaf-demo)
;;   ;; (require 'eaf-airshare)
;;   (require 'eaf-terminal)
;;   (require 'eaf-markdown-previewer)
;;   (require 'eaf-video-player)
;;   (require 'eaf-vue-demo)
;;   (require 'eaf-file-sender)
;;   (require 'eaf-pdf-viewer)
;;   (require 'eaf-mindmap)
;;   ;; (require 'eaf-netease-cloud-music)
;;   ;; (require 'eaf-jupyter)
;;   (require 'eaf-org-previewer)
;;   (require 'eaf-system-monitor)
;;   ;; (require 'eaf-rss-reader)
;;   (require 'eaf-file-browser)
;;   (require 'eaf-browser)
;;   (require 'eaf-org)
;;   (require 'eaf-mail)
;;   ;; (require 'eaf-git)
;;   ;; (when (display-graphic-p)
;;   ;;   (require 'eaf-all-the-icons))

;;   ;; (require 'eaf-evil)
;;   ;; (define-key key-translation-map (kbd "SPC")
;;   ;;             (lambda (prompt)
;;   ;;               (if (derived-mode-p 'eaf-mode)
;;   ;;                   (pcase eaf--buffer-app-name
;;   ;;                     ("browser" (if  (string= (eaf-call-sync "call_function" eaf--buffer-id "is_focus") "True")
;;   ;;                                    (kbd "SPC")
;;   ;;                                  (kbd eaf-evil-leader-key)))
;;   ;;                     ("pdf-viewer" (kbd eaf-evil-leader-key))
;;   ;;                     ("image-viewer" (kbd eaf-evil-leader-key))
;;   ;;                     (_  (kbd "SPC")))
;;   ;;                 (kbd "SPC"))))
;;   )
